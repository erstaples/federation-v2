/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedServiceAccountPlacementLister helps list FederatedServiceAccountPlacements.
type FederatedServiceAccountPlacementLister interface {
	// List lists all FederatedServiceAccountPlacements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedServiceAccountPlacement, err error)
	// FederatedServiceAccountPlacements returns an object that can list and get FederatedServiceAccountPlacements.
	FederatedServiceAccountPlacements(namespace string) FederatedServiceAccountPlacementNamespaceLister
	FederatedServiceAccountPlacementListerExpansion
}

// federatedServiceAccountPlacementLister implements the FederatedServiceAccountPlacementLister interface.
type federatedServiceAccountPlacementLister struct {
	indexer cache.Indexer
}

// NewFederatedServiceAccountPlacementLister returns a new FederatedServiceAccountPlacementLister.
func NewFederatedServiceAccountPlacementLister(indexer cache.Indexer) FederatedServiceAccountPlacementLister {
	return &federatedServiceAccountPlacementLister{indexer: indexer}
}

// List lists all FederatedServiceAccountPlacements in the indexer.
func (s *federatedServiceAccountPlacementLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedServiceAccountPlacement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedServiceAccountPlacement))
	})
	return ret, err
}

// FederatedServiceAccountPlacements returns an object that can list and get FederatedServiceAccountPlacements.
func (s *federatedServiceAccountPlacementLister) FederatedServiceAccountPlacements(namespace string) FederatedServiceAccountPlacementNamespaceLister {
	return federatedServiceAccountPlacementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedServiceAccountPlacementNamespaceLister helps list and get FederatedServiceAccountPlacements.
type FederatedServiceAccountPlacementNamespaceLister interface {
	// List lists all FederatedServiceAccountPlacements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedServiceAccountPlacement, err error)
	// Get retrieves the FederatedServiceAccountPlacement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedServiceAccountPlacement, error)
	FederatedServiceAccountPlacementNamespaceListerExpansion
}

// federatedServiceAccountPlacementNamespaceLister implements the FederatedServiceAccountPlacementNamespaceLister
// interface.
type federatedServiceAccountPlacementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedServiceAccountPlacements in the indexer for a given namespace.
func (s federatedServiceAccountPlacementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedServiceAccountPlacement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedServiceAccountPlacement))
	})
	return ret, err
}

// Get retrieves the FederatedServiceAccountPlacement from the indexer for a given namespace and name.
func (s federatedServiceAccountPlacementNamespaceLister) Get(name string) (*v1alpha1.FederatedServiceAccountPlacement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedserviceaccountplacement"), name)
	}
	return obj.(*v1alpha1.FederatedServiceAccountPlacement), nil
}
