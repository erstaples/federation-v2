/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedIngressPlacementLister helps list FederatedIngressPlacements.
type FederatedIngressPlacementLister interface {
	// List lists all FederatedIngressPlacements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedIngressPlacement, err error)
	// FederatedIngressPlacements returns an object that can list and get FederatedIngressPlacements.
	FederatedIngressPlacements(namespace string) FederatedIngressPlacementNamespaceLister
	FederatedIngressPlacementListerExpansion
}

// federatedIngressPlacementLister implements the FederatedIngressPlacementLister interface.
type federatedIngressPlacementLister struct {
	indexer cache.Indexer
}

// NewFederatedIngressPlacementLister returns a new FederatedIngressPlacementLister.
func NewFederatedIngressPlacementLister(indexer cache.Indexer) FederatedIngressPlacementLister {
	return &federatedIngressPlacementLister{indexer: indexer}
}

// List lists all FederatedIngressPlacements in the indexer.
func (s *federatedIngressPlacementLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedIngressPlacement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedIngressPlacement))
	})
	return ret, err
}

// FederatedIngressPlacements returns an object that can list and get FederatedIngressPlacements.
func (s *federatedIngressPlacementLister) FederatedIngressPlacements(namespace string) FederatedIngressPlacementNamespaceLister {
	return federatedIngressPlacementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedIngressPlacementNamespaceLister helps list and get FederatedIngressPlacements.
type FederatedIngressPlacementNamespaceLister interface {
	// List lists all FederatedIngressPlacements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedIngressPlacement, err error)
	// Get retrieves the FederatedIngressPlacement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedIngressPlacement, error)
	FederatedIngressPlacementNamespaceListerExpansion
}

// federatedIngressPlacementNamespaceLister implements the FederatedIngressPlacementNamespaceLister
// interface.
type federatedIngressPlacementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedIngressPlacements in the indexer for a given namespace.
func (s federatedIngressPlacementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedIngressPlacement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedIngressPlacement))
	})
	return ret, err
}

// Get retrieves the FederatedIngressPlacement from the indexer for a given namespace and name.
func (s federatedIngressPlacementNamespaceLister) Get(name string) (*v1alpha1.FederatedIngressPlacement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedingressplacement"), name)
	}
	return obj.(*v1alpha1.FederatedIngressPlacement), nil
}
